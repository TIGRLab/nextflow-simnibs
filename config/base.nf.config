import groovy.time.TimeDuration

// Dynamic queue allocation functions
def timedur(x){
    return new TimeDuration(*x.split(':').collect{it.toInteger()}, 0)
}

def get_queue(w, mapping){
    // [String : String] --> [TimeDuration : String]
    td_mapping = mapping.collectEntries{k,v -> [timedur(k), v]}
    td_w = timedur(w)
    ps = td_mapping.grep{it.key >= td_w}.sort{it.key}
    return ps.first().value
}

singularity {
    autoMounts=true
    enabled=true
}

retry_val=3
license="/freesurfer/6.0.0/build/"
params.atlas_dir="${projectDir.getParent()}/standard_mesh_atlases/resample_fsaverage"
params.default_dose=1e6

profiles {

    //DEFAULT
    standard {
        partition = {s->"high-moby"}
        params.license = "/opt/quarantine/$license"
        params.scratchDir = "/tmp/"
        process.executor = "slurm"
        includeConfig './process.nf.config'
    }

    kimel {
        partition = {s->"high-moby"}
        params.license = "/opt/quarantine/$license"
        params.scratchDir = "/tmp/"
        process.executor = "slurm"
        includeConfig './process.nf.config'
    }

    scc {
        partition_map = ["2:00:00": "short",
                        "12:00:00": "medium",
                        "1:00:00:00": "long",
                        "166:16:00:00": "verylong"]
        partition = { t -> get_queue(t,partition_map) }
        params.license = "/KIMEL/quarantine/$license"
        params.scratchDir = "/export/ramdisk/"
        process.executor = "slurm"
        includeConfig './process.nf.config'
    }

    local {
        partition = {s -> ""}
        process.executor = "local"
        process.maxForks = 4
        params.license = "/opt/quarantine/$license"
        params.scratchDir = "/tmp/"
        includeConfig './process.nf.config'
    }
}
