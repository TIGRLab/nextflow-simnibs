// Caching mechanism
params.cache_dir = null
Closure cacheDir;

if (params.cache_dir){
    cacheDir = { f ->
                    def d = new File("$params.cache_dir/$f")
                    d.mkdirs()
                    "$params.cache_dir/$f"
               }
}else{
    cacheDir = { f -> "" }
}

// Handling queue partitioning
Closure get_partition;
if (partition instanceof Closure){
    get_partition = partition
}else{
    get_partition = { t -> partition }
}


process {

    errorStrategy = {task.attempt == 3 ? "finish" : "retry"}

    withLabel: bin{
        containerOptions = "-B ${projectDir.getParent()}/bin:/scripts"
    }
    // Common labels
    withLabel: ants{
        container = params.ants_img
    }

    withLabel: connectome{
        container = params.connectome_img
        containerOptions = "-B ${params.atlas_dir}:/atlas"
    }

    withLabel: freesurfer{
        container = params.freesurfer_img
        containerOptions = "-B ${params.license}:/license"
        beforeScript = "export SINGULARITYENV_FS_LICENSE=/license/license.txt"
    }

    withLabel: simnibs{
        container = params.simnibs_img
    }

    withLabel: numpy{
        container = params.simnibs_img
    }

    withName: antsRegistration{
        storeDir = cacheDir("antsRegistration")
        cpus = 8
        clusterOptions = "--mem-per-cpu=2G"
        time = "02:30:00"
        queue = {get_partition(task.time)}
    }

    withName: _untransformCoordinates{
        storeDir = cacheDir("_untransformCoordinates")
    }

    withName: simulate{
        storeDir = cacheDir("simulate")
        cpus = 4
        clusterOptions = "--mem-per-cpu=2G"
        time = "00:15:00"
        queue = {get_partition(task.time)}
    }
}
